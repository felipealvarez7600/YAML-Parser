package pt.isel

import org.cojen.maker.ClassMaker
import org.cojen.maker.MethodMaker
import org.cojen.maker.Variable
import pt.isel.interfaces.YamlParser
import java.lang.reflect.Modifier
import java.lang.reflect.Parameter
import java.lang.reflect.Type
import kotlin.reflect.KClass
import kotlin.reflect.javaType

/**
 * A YamlParser that uses Cojen Maker to generate a parser.
 */
open class YamlParserCojen<T : Any>(
    private val type: KClass<T>,
    private val nrOfInitArgs: Int)
: AbstractYamlParser<T>(type) {

    companion object {
        private val yamlParsers: MutableMap<String, YamlParserCojen<*>> = mutableMapOf()

        private fun parserName(type: KClass<*>, nrOfInitArgs: Int): String {
            return "YamlParser${type.simpleName}$nrOfInitArgs"
        }
        /**
         * Creates a YamlParser for the given type using Cojen Maker if it does not already exist.
         * Keep it in an internal cache.
         */
        fun <T : Any> yamlParser(type: KClass<T>, nrOfInitArgs: Int = type.constructors.first().parameters.size): AbstractYamlParser<T> {
            return yamlParsers.getOrPut(parserName(type, nrOfInitArgs)) {
                YamlParserCojen(type, nrOfInitArgs)
                    .buildYamlParser()
                    .finish()
                    .getConstructor(KClass::class.java, Integer::class.java)
                    .newInstance(type, nrOfInitArgs) as YamlParserCojen<*>
            } as YamlParserCojen<T>
        }
    }
    /**
     * Used to get a parser for other Type using the same parsing approach.
     */
    override fun <T : Any> yamlParser(type: KClass<T>) = YamlParserCojen.yamlParser(type)

    /**
     * Do not change this method in YamlParserCojen.
     */
    override fun newInstance(args: Map<String, Any>): T {
        throw UnsupportedOperationException("This method is overridden in a subclass dynamically generated by buildYamlParser() function!")
    }

    @OptIn(ExperimentalStdlibApi::class)
    private fun buildYamlParser() : ClassMaker {
        val parameters = type.constructors.first().parameters.filter {!it.isOptional}
        val className = parserName(type, nrOfInitArgs)
        val classMaker = ClassMaker.begin(className).public_().extend(YamlParserCojen::class.java).public_()
        classMaker.addField(KClass::class.java, "type").private_().final_()
        classMaker.addField(Integer::class.java, "nrOfInitArgs").private_().final_()
        val constructor = classMaker.addConstructor(KClass::class.java, Integer::class.java).public_()
        constructor.field("type").set(constructor.param(0))
        constructor.field("nrOfInitArgs").set(constructor.param(1))
        constructor.invokeSuperConstructor(constructor.param(0), constructor.param(1))
        val newInstanceMethod = classMaker.addMethod(Any::class.java, "newInstance", Map::class.java).public_().override()
        val args = newInstanceMethod.param(0)

//        val constructorArgs = mutableListOf<Any>()
//        val firstArg = args.invoke("values").invoke("iterator").invoke("next")
//        parameters.forEach { param ->
//            val paramName = param.name
//            val value = args.invoke("get", paramName)
//            val cast = newInstanceMethod.invoke("valueOf", value.cast(String::class.java))
//            constructorArgs.add(value)
//        }
//        val constructorCall = newInstanceMethod.new_(type.java, *constructorArgs.toTypedArray())
//        newInstanceMethod.return_(constructorCall)

        return classMaker
    }

}

